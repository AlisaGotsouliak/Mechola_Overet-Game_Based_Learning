@page "/GamesList"
@using template.Shared.Games;
@using template.Shared.Models.Games;
@inject HttpClient Http;
@inject NavigationManager Nav;

<div id="pageTop">
    <h3>המשחקים שלי</h3>
    <div id="toolTipGroup">
        <div id="infoContainers">
            <div id="infoContent">
                <div>
                    <div id="greenInfo" class="infoContainersImages"></div>
                    <span>מפורסם</span>
                </div>
                <div>
                    <div id="yellowInfo" class="infoContainersImages"></div>
                    <span>ניתן לפרסם</span>
                </div>
                <div>
                    <div id="redInfo" class="infoContainersImages"></div>
                    <span>לא ניתן לפרסם</span>
                </div>
            </div>           
        </div>
        <div id="gamesToolTip" class="toolTip">?</div>
    </div>
</div>

<div class="page_bg">
    <PageTitle>המשחקים שלי</PageTitle>

    @if (MyGamesList != null)
    {
        <div id="allGames">
            @foreach (GameToCard game in MyGamesList)
            {
                @if (game.CanPublish == false)
                {
                    gameID = "canNotPublish";
                }
                else if (@game.IsPublished == true)
                {
                    gameID = "published";
                }
                else
                {
                    gameID = "canPublish";
                }
                <div id="@gameID" class="gamesContainers">
                    <div class ="gameNameAndCode">

                        <span>@game.Game</span>
                        <span class="gameCode">@game.GameCode</span>

                    </div>
                    <div>
                        <div class ="numofquestionsAndTime">
                            <div class="numOfQOrTimeContainer">
                                <div class="numOfQOrTimeCount">@game.Num_Questions</div>
                                <div class="numOfQ0rTimeText">שאלות</div>
                            </div>
                            @if (game.Time == 0)
                            {
                                <div class="numOfQOrTimeContainer">
                                    <div class="numOfQOrTimeCount">ללא</div>
                                    <div class="numOfQ0rTimeText">הגבלת זמן</div>
                                </div>
                            }
                            else
                            {
                                <div class="numOfQOrTimeContainer">
                                    <div class="numOfQOrTimeCount">@game.Time</div>
                                    <div class="numOfQ0rTimeText">שניות לשאלה</div>
                                </div>
                            }
                        </div>

                        <div class="gameEditorOptions">
                            <a href="https://localhost:7022/EditGame/RouteParams/@game.GameCode/@game.Game/@game.Time">
                                <div class="editIcon"></div>
                            </a>

                            @if (game.CanPublish == false)
                            {
                                @* <input type="checkbox" disabled /> *@
                                <label class="switch">
                                    <input type="checkbox" disabled>
                                    <span class="slider round"></span>
                                </label>
                            }
                            else
                            {
                                @* <input type="checkbox" checked="@game.IsPublished"
                                       @onchange="(() =>changePublish(game))" /> *@

                                <label class="switch">
                                    <input type="checkbox" checked="@game.IsPublished"
                                           @onchange="(() =>changePublish(game))">
                                    <span class="slider round"></span>
                                </label>
                            }

                            <div class="deleteIcon" @onclick="(() =>DeleteGame(game))"></div>
                        </div>
                    </div>
                </div>
                <br />
                <br />
                <br />
            }
            <a href="https://localhost:7022/EditGame/RouteParams/0/@gameToAdd.Game/50">
                <div id="CreateNewGame"></div>
            </a>
        </div>
    }



    @*    <p>@msg</p>*@

    @*    @if (msg != "")
    {
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
    }*@
</div>

@code {
    public string gameID = "";

    [CascadingParameter]
    public int UserId { get; set; }
    GameToAdd gameToAdd = new GameToAdd();

    // פתיחת מופע חדש של המחלקה
    List<GameToCard> MyGamesList;
    string msg = "";


    // בעת טעינת העמוד
    protected override async Task OnInitializedAsync()
    {
        gameToAdd.Game = " ";
        // פנייה לקונטרולר ושליפת המשחקים
        var gamesRes = await Http.GetAsync("api/Games");
        if (gamesRes.IsSuccessStatusCode == true)
        {
            // השמת הנתונים במופע שפתחנו
            MyGamesList = gamesRes.Content.ReadFromJsonAsync<List<GameToCard>>().Result;
        }
        else
        {
            // נטפל במצבים שהיוזר לא רשאי לגשת אל המידע ונאכלס משתנה של הודעה בהתאם
            string error = gamesRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No games for this user":
                    msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                    break;
                case "user is not authenticated":
                    msg = "ארעה בעיה בעת אימות המשתמש";
                    break;
            }
        }
    }

    async Task DeleteGame(GameToCard game)
    {
        GameCodeClass gameCode = new GameCodeClass();
        gameCode.GameCode = game.GameCode;
        var gamesRes = await Http.PostAsJsonAsync("api/Games/Delete", gameCode);
        if (gamesRes.IsSuccessStatusCode)
        {
            msg = "נמחק בהצלחה";
            MyGamesList.Remove(game);
        }
        else
            msg = "המחיקה נכשלה";
    }


    protected async Task changePublish(GameToCard game)
    {
        // בעת לחיצה על פרסום ניצור מופע של מחלקה עם מזהה המשחק ומצב הפרסום
        PublishGame gameToSend = new PublishGame();
        gameToSend.GameCode = game.GameCode;
        // נגדיר שמצב הפרסום הפוך למצב הנוכחי. כלומר, אם לא היה מפורסם - כעת יהיה ולהיפך
        gameToSend.IsPublished = !game.IsPublished;
        // נשלח את המידע לקונטרולר
        var userRes = await Http.PostAsJsonAsync("api/games/publishGame", gameToSend);
        // אם הכל תקין - נציג את מצב הפרסום העדכני
        if (userRes.IsSuccessStatusCode == true)
        {
            game.IsPublished = !game.IsPublished;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            // אם נמצא בקונטרולר שמסיבה כלשהי טעינו ובעצם לא ניתן לפרסם את המשחק
            if (error == "This game cannot be published")
            {
                // נשנה את מצב הפרסום ולא נאפשר לפרסם
                game.IsPublished = false;
                game.CanPublish = false;
                // נסביר למשתמש מה קרה
                msg = "המשחק אינו מאושר לפרסום";
            }
            else
            {
                // אחרת נקרא לפונקציית הודעות השגיאה אליה נוסיף את האופציות החדשות
                ShowError(error);
            }
        }
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                msg = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                msg = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                msg = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
            case "It's Not Your Game":
                msg = "המשחק הזה אינו שלך...";
                break;
            case "This game cannot be published":
                msg = "המשחק אינו מאושר לפרסום";
                break;
            case "Update Failed":
                msg = "בעיה בעדכון המשחק";
                break;
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }
}
