@page "/EditGame/RouteParams/{GameCode:int}/{GameName}/{GameTime:int}"
@using template.Shared.Games;
@using template.Shared.Models.Games;
@using template.Client.Components;
@inject HttpClient Http;

<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                הגדרות כלליות
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
            <div class="accordion-body">

                @if (GameName == " ")
                {
                    <p>הוספת משחק חדש</p>
                    <EditForm Model="gameToAdd" OnValidSubmit="CreateGame">
                        <DataAnnotationsValidator />
                        <CustomInputText @bind-Value="gameToAdd.Game" maxLength="20" minLength="3" />
                        <ValidationMessage For="@(() => gameToAdd.Game)" />
                        <div>
                            <select id="timeOptions" @bind="gameToAdd.Time">
                                <option value="50">50 שניות</option>
                                <option value="60">60 שניות</option>
                                <option value="90">90 שניות</option>
                                <option value="0">ללא הגבלה</option>
                            </select>
                        </div>
                        <br />
                        <input type="submit" value="שמירת הגדרות" />
                    </EditForm>
                }
                else
                {
                    <p>עריכת משחק</p>
                    <EditForm Model="gameToAdd" OnValidSubmit="UpdateGame">
                        <DataAnnotationsValidator />
                        <CustomInputText @bind-Value="gameToAdd.Game" maxLength="20" minLength="3" />
                        <ValidationMessage For="@(() => gameToAdd.Game)" />
                        <div>
                            <select id="timeOptions" @bind="gameToAdd.Time">
                                <option value="50">50 שניות</option>
                                <option value="60">60 שניות</option>
                                <option value="90">90 שניות</option>
                                <option value="0">ללא הגבלה</option>
                            </select>
                        </div>
                        <br />
                        @if (gameToAdd.Game.Length < 3)
                        {
                            <input type="submit" value="שמירת הגדרות" disabled />
                        }
                        else
                        {
                            <input type="submit" value="שמירת הגדרות" />
                        }
                    </EditForm>
                }

            </div>
        </div>
    </div>
</div>
<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                שאלות המשחק
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse show" aria-labelledby="headingTwo">
            <div class="accordion-body">
                @if (gameToAdd.Game != " " && gameToAdd.Time != null)
                {
                    <h4>שאלות המשחק</h4>
                    if (full_gameInfo.question_List != null)
                    {
                        @foreach (QuestionDB question in full_gameInfo.question_List)
                        {
                            <div @onclick="(() =>ShowQuestion(question))" style="border: 2px solid black; border-radius:10px">
                                <p>@question.QuestionText</p>
                                <input type="button" @onclick="() => RemoveInput(question)" value="מחק">
                            </div>
                        }
                    }
                    @*<input type="button" value="+" @onclick="AddInput">*@
                }
            </div>
        </div>
    </div>

</div>

@if (isShown == "true")
{
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button" type="button" data-bs-toggle="collapse">
                    יצירת שאלה
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse show" aria-labelledby="headingThree">
                <div class="accordion-body">
                    <p>שאלה</p>
                    <div>
                        <input type="text" placeholder="Text" @bind=toShow.QuestionText />
                        <input type="text" placeholder="Image" @bind=toShow.QuestionImage />
                    </div>
                </div>
                @*<input type="button" value="Save" @onclick="AddQuestion"> *@
            </div>
        </div>
    </div>
}
else if (isShown == "Edit")
{
    <div class="accordion" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button" type="button" data-bs-toggle="collapse">
                    עריכת שאלה
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse show" aria-labelledby="headingThree">
                <div class="accordion-body">
                    <p>שאלה</p>
                    <div>
                        @if (toShow != null)
                        {
                            <input type="text" @bind=toShow.QuestionText />
                            <input type="text" @bind=toShow.QuestionImage />
                            @if (toShow.Answers != null)
                            {
                                foreach (AnswerDB ans in toShow.Answers)
                                {
                                    @if (ans.AnswerText != "")
                                    {
                                        <input type="text" @bind=ans.AnswerText />
                                    }
                                    else
                                    {
                                        <input type="text" @bind=ans.AnswerImage />
                                    }
                                    <input type="radio" checked="@ans.IsCorrect" />
                                }
                            }
                        }
                    </div>
                </div>
                @*<input type="button" value="Save" @onclick="SaveQtoList">*@
            </div>
        </div>
    </div>
}


<p>@msg</p>

@code {
    GameToAdd gameToAdd = new GameToAdd();
    SettingsUpdate settingToSend = new SettingsUpdate();
    //// פתיחת מופע חדש של המחלקה
    //List<QuestionDB> questionList = new List<QuestionDB>();
    QuestionDB toShow = new QuestionDB();
    //int i = 0;
    string isShown = "false";
    string msg = "";
    FullGame full_gameInfo = new FullGame();
    [Parameter]
    public int GameCode { get; set; }
    [Parameter]
    public string GameName { get; set; }
    [Parameter]
    public int GameTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        gameToAdd.Time = GameTime;
        gameToAdd.Game = GameName;
        settingToSend.GameCode = GameCode;

        var full_game_res = await Http.GetAsync("api/Games/GetFullGame/" + GameCode);
        if (full_game_res.IsSuccessStatusCode)
        {
            full_gameInfo = full_game_res.Content.ReadFromJsonAsync<FullGame>().Result;
        }
        else
            msg = full_game_res.Content.ReadAsStringAsync().Result;
    }

    async Task CreateGame()
    {
        //שליחת המשחק החדש לקונטרולר
        var newGameRes = await Http.PostAsJsonAsync("api/Games/addGame", gameToAdd);
        if (newGameRes.IsSuccessStatusCode == true)
        {
            msg = "הוספת משחק בוצע";
            //החזרת המשחק והוספתו לרשימת המשחקים כדי שיתווסף לטבלה
            GameToCard newGame = newGameRes.Content.ReadFromJsonAsync<GameToCard>().Result;
            //gameToAdd.Time = newGame.Time;
        }
        else
        {
            string error = newGameRes.Content.ReadAsStringAsync().Result;
            ShowError(error);
        }
    }

    async Task UpdateGame()
    {
        settingToSend.Time = gameToAdd.Time;
        settingToSend.Game = gameToAdd.Game;
        var newGameRes = await Http.PostAsJsonAsync("api/Games/Update", settingToSend);
        string error = newGameRes.Content.ReadAsStringAsync().Result;
        ShowError(error);
    }

    //async Task AddQuestion()
    //{
    //    var newQuestion = await Http.PostAsJsonAsync("api/Games/AddQuestion", toShow);
    //    if (newQuestion.IsSuccessStatusCode)
    //    {
    //        questionList = newQuestion.Content.ReadFromJsonAsync<List<QuestionDB>>().Result;
    //        toShow = new QuestionDB();
    //    }
    //    else
    //        msg = newQuestion.Content.ReadAsStringAsync().Result;

    //}

    //private void AddInput()
    //{
    //    toShow = new InsertQuestion();
    //    isShown = "true";
    //    questionList.Add(toShow);
    //}

    private void RemoveInput(QuestionDB input)
    {
        isShown = "false";
        full_gameInfo.question_List.Remove(input);
    }

    void ShowQuestion(QuestionDB questionToShow)
    {
        isShown = "Edit";
        toShow = questionToShow;
    }

    //void SaveQtoList()
    //{
    //    questionList.Add(toShow);
    //}

    //void EditInQList()
    //{
    //    questionList.Add(toShow);
    //}

    void ShowError(string error)
    {
        switch (error)
        {
            case "user is not authenticated":
                msg = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                msg = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                msg = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
            case "Updated":
                msg = "המשחק עודכן בהצלחה";
                break;
            case "Update failed":
                msg = "העדכון נכשל";
                break;
        }
    }
}
